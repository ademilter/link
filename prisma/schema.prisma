// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  //  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @default(now()) @map(name: "updated_at")
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  refresh_token_expires_in Int?
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  username      String?   @db.VarChar(512) // github.login == slug
  bio           String?   @db.VarChar(512)
  blog          String?   @db.VarChar(512)
  location      String?   @db.VarChar(256)
  accounts      Account[]
  sessions      Session[]
  Link          Link[]
  Vote          Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Link {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  published   Boolean  @default(false)
  url         String   @db.VarChar(512)
  title       String?  @db.VarChar(512)
  description String?  @db.VarChar(2048)
  image       String?  @db.VarChar(512)
  icon        String?
  data        Json
  votes       Vote[]
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  linkId    String
  link      Link     @relation(fields: [linkId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
